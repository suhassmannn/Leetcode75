/*Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.*/


My Method: 67/83 test cases passed. Faulty logic.
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int length = nums.size();
        int arr[3] = {0};
        arr[0] = nums[0];
        int start = 0;
        for(int i=0;i<length;i++){
            if( (start+1<3) && (nums[i] > arr[start]) ){
                arr[start+1] = nums[i];
                start++;
            }
            else if( (start-1>=0) && (nums[i] < arr[start-1]) ){
                arr[start-1] = nums[i];
                arr[start] = 0;
                start--;
            }
            else{
                arr[start] = nums[i];
            }
        }
        if(start==2) return true;
        return false;
    }
};

Referred Method: 83/83 all test cases passed.
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int a = INT_MAX, b = INT_MAX;
        for(int i=0;i<nums.size();i++){
            if(nums[i] <= a){
                a = nums[i];
            }
            else if(nums[i] > a && nums[i] < b){
                b = nums[i];
            }
            else if( nums[i] > a && nums[i] > b){
                return true;
            }
        }
        return false;
    }
};
